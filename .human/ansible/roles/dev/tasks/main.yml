---
- name: Install Developer Tools
  pacman:
    name: '{{ developer_stack + developer_stack_arch }}'
    state: present
  become: yes
  when: ansible_distribution == 'Archlinux'

- name: Install Developer Tools [Ubuntu]
  apt:
    name: '{{ developer_stack + developer_stack_ubuntu }}'
    state: present
  become: yes
  when: ansible_distribution == 'Ubuntu'

- name: Install Developer Tools from AUR
  yay:
    name: '{{ developer_stack_yay }}'
    state: present
  become: yes
  tags: yay
  when: ansible_distribution == 'Archlinux'

- name: Install Developer Tools from Snap [Ubuntu]
  snap:
    name: '{{ developer_stack_snap }}'
    state: present
    # This option can only be specified if there is a single snap in the task.!?
    classic: true
  become: yes
  tags: snap
  when: ansible_distribution == 'Ubuntu'

- name: Setup Docker Tools
  include: ../../general/docker-config.yml

# Android
#

# The AUR packages install the SDK in /opt/android-sdk/. This directory has root permissions, to use it as a regular user, create the android-sdk users group, add `run_as_user`.
- name: Ensure group "android-sdk" exists
  group:
    name: android-sdk
    state: present
  when: ansible_distribution == 'Archlinux'
- name: Add the user to android
  user:
    name: "{{ run_as_user }}"
    groups: android-sdk
    append: yes
  when: ansible_distribution == 'Archlinux'

    # Set an access control list to let user write into the android-sdk folder. As running sdkmanager can also create new files, set the ACL as default ACL. the X in the default group entry means "allow execution if executable by the owner (or anyone else)"
- name: Sets default ACL for run_as_user on /etc/foo.d/
  acl:
    path: /opt/android-sdk/
    entity: android-sdk
    etype: group
    permissions: rwx
    default: yes
    recursive: yes
    state: present
  when: ansible_distribution == 'Archlinux'

- name: Create output directory
  file:
    path: "{{ output_dir }}"
    state: directory
  become_user: '{{ run_as_user }}'
  tags: test
- name: Read prev test results
  shell: cat {{ output_dir }}/dev_test_result.txt
  register: prev_test_result
  become_user: "{{run_as_user}}"
  changed_when: false
  ignore_errors: yes
  tags: test
- name: Test commands
  script: test_commands.sh 2>&1 tee {{ output_dir }}/dev_test_result.txt
  become_user: "{{run_as_user}}"
  register: test_result
  changed_when: (prev_test_result.stdout is undefined or test_result.stdout is undefined) or test_result.stdout != prev_test_result.stdout
  tags: test
