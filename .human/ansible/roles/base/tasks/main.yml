---
- name: Upgrade all packages ("pacman -Syu")
  pacman:
    update_cache: yes
    upgrade: yes
  tags: upgrade
  when: ansible_distribution == 'Archlinux'

- name: Upgrade all packages [Ubuntu]
  apt:
    update_cache: yes
    force_apt_get: yes
    upgrade: dist
    cache_valid_time: 3600
  tags: upgrade
  when: ansible_distribution == 'Ubuntu'

- name: Install Utils
  pacman:
    name: '{{ utils + utils_arch }}'
    state: present
  become: yes
  when: ansible_distribution == 'Archlinux'

- name: Install Host Utils
  pacman:
    name: '{{ host_utils}}'
    state: present
  become: yes
  when: ansible_distribution == 'Archlinux' and not no_ui_present

- name: Install basics [Ubuntu]
  apt:
    name: '{{ utils + utils_ubuntu }}'
    state: present
  become: yes
  when: ansible_distribution == 'Ubuntu'

- name: Check if yay file exists
  stat:
    path: /usr/bin/yay
  register: is_yay_available
  when: ansible_distribution == 'Archlinux'

- name: Install base-devel require to compile yay
  pacman:
    name: base-devel
    state: present
  become: yes
  when: (is_yay_available.stat.exists is defined and is_yay_available.stat.exists != true) and ansible_distribution == 'Archlinux'

- name: Setup yay
  shell: if [ -d "/tmp/yay" ]; then rm -Rf "/tmp/yay"; fi && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si --noconfirm
  become_user: "{{run_as_user}}"
  args:
    chdir: /tmp/
  when: (is_yay_available.stat.exists is defined and is_yay_available.stat.exists != true) and ansible_distribution == 'Archlinux'

- name: Install Utils from Arch User Repository
  yay:
    name: '{{ utils_yay }}'
    state: present
  become: yes
  when: ansible_distribution == 'Archlinux'

- name: Install Host Utils from Arch User Repository
  yay:
    name: '{{ host_utils_yay }}'
    state: present
  become: yes
  when: ansible_distribution == 'Archlinux' and not no_ui_present

- name: Create output directory 
  file:
    path: "{{ output_dir }}"
    state: directory
  become_user: '{{ run_as_user }}'
  tags: [test, setup]

- name: Read prev setup results
  shell: cat {{ output_dir }}/base_setup_result.txt
  register: prev_setup_result
  become_user: "{{run_as_user}}"
  changed_when: false
  ignore_errors: yes
  tags: test
- name: Setup scripts
  script: /home/{{ run_as_user }}/.human/setup/setup_home.sh 2>&1 | tee {{ output_dir }}/base_setup_result.txt
  become_user: "{{run_as_user}}"
  register: setup_result
  changed_when: (prev_setup_result.stdout is undefined or setup_result.stdout is undefined) or setup_result.stdout != prev_setup_result.stdout
  tags: setup

- name: Check if tools folder exists
  stat:
    path: /home/{{ run_as_user }}/tools
  register: is_tools_available
- name: Creates tools directory
  file:
    path: /home/{{ run_as_user }}/tools
    state: directory
  become_user: '{{ run_as_user }}'
  when: is_tools_available.stat.exists is defined and is_tools_available.stat.exists != true

- name: Read prev test results
  shell: cat {{ output_dir }}/base_test_result.txt
  register: prev_test_result
  become_user: "{{run_as_user}}"
  changed_when: false
  ignore_errors: yes
  tags: test
- name: Test commands
  script: test_commands.sh 2>&1 | tee {{ output_dir }}/base_test_result.txt
  become_user: "{{run_as_user}}"
  register: test_result
  changed_when: "(prev_test_result.stdout is undefined or test_result.stdout is undefined) or prev_test_result.stdout != test_result.stdout"
  tags: test
- name: Debug prev
  debug:
    msg: "{{ prev_test_result.stdout }}"
  tags: test
- name: Debug new
  debug:
    msg: "{{ test_result.stdout }}"
  tags: test